install.packages(c("knitr", "markdown", "swirl"))
install.packages("pdflatex")
table(pml)
setwd('D:\\cursuri\\PracticalMachineLearning\\Project\\pml');
pml <- read.csv('pml-training.csv', na.strings=c("NA",""));
table(pml)
names(pml)
sum(is.na(classe))
sum(is.na(pml$classe))
sum(is.na(pml$magnet_forearm_z))
sum(is.na(pml$min_pitch_belt))
dim(pml)
sum(is.na(pml$new_window))
pair(pml)
pairs(pml)
library(caret);
?preProcess
sapply(pml, class)
?spam
head(pml)
pml_corr <- cor(pml_train)
ls()
pml_corr <- cor(pml)
names(pml)
pml_cl <- pml[, colSums(is.na(pml) == 0]
pml_cl <- pml[, colSums(is.na(pml)) == 0]
dim(pml_cl)
sapply(pml_cl, class)
head(pml_cl)
names(pml-cl)
names(pml_cl)
pml_cl1 <- pml_cl[,-X]
pml_cl1 <- pml_cl[,-c(X)]
pml_cl1 <- pml[, - names(pml) %in% c('X')]
pml_cl1 <- pml[, !names(pml) %in% c('X')]
names(pml_cl1)
pml <- pml[, colSums(is.na(pml)) == 0];
col_drop <- c('X','user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window');
pml <- pml[, !(names(pml) %in% col_drop) ];
cor(pml[,-54]
)
names(pml)
dim(pml)
in_train <- createDataPartition(pml$classe, p=0.60, list=FALSE);
pml_train <- pml[in_train,];
pml_valid <- pml[-in_train,];
col_ignore <- c('classe');
preProc_PCA <- preProcess(pml_train[, !names(pml_train) %in% col_ignore], method="pca");
pml_train_PCA <- predict(preProc_PCA, pml_train[, !names(pml_train) %in% col_ignore] );
pml_valid_PCA <- predict(preProc_PCA, pml_valid[, !names(pml_train) %in% col_ignore] );
names(pml_train_PCA)
screenplot(pml_train_PCA)
plot(pml_train_PCA)
pml_train_PCA
plot(pml_train_PCA, type="lines")
pml_modelFit_PCA <- train(pml$classe ~ ., method="rf", data=pml_train_PCA,)
pml_modelFit_PCA <- train(pml$classe ~ ., method="rf", data=pml_train_PCA)
pml_modelFit_PCA <- train(pml$classe ~ ., method="rf", data=pml_train_PCA, trControl=trainControl(method="cv", number=4), importance=TRUE)
pml_train_PCA$PC1
sapply(pml_train_PCA, class);
pml_modelFit_PCA <- train(pml$classe ~ ., method="rf", data=pml_train_PCA, trControl=trainControl(method="cv", number=4), importance=TRUE)
plot(pml_train_PCA, type = "l")
summary(pml_train_PCA)
dim(pml_train)
pml_modelFit_PCA <- train(pml_train$classe ~ ., method="rf", data=pml_train_PCA)
pml_PCA_confusion <- confusionMatrix(pml_vvalid$classe, predict(pml_modelFit_PCA, pml_valid_PCA));
pml_PCA_confusion <- confusionMatrix(pml_valid$classe, predict(pml_modelFit_PCA, pml_valid_PCA));
pml_PCA_confusion$table;
pml_PCA_confusion;
vaImpPlot(pml_modelFit_PCA$FinalModel, sort=TRUE)
varImpPlot(pml_modelFit_PCA$FinalModel, sort=TRUE)
class(pml_modelFit_PCA)
varImpPlot(pml_modelFit_PCA$finalModel, sort=TRUE)
varImpPlot(pml_modelFit_PCA, sort=TRUE)
varImpPlot(pml_modelFit_PCA, sort=TRUE)
names(pml_PCA_confusion)
pml_PCA_confusion$overall
pml_PCA_confusion$overall$Accuracy
pml_PCA_confusion$dots
pml_PCA_confusion$positive
pml_PCA_confusion$byClass
ls()
summary(pml_train_PCA)
names(pml_train_PCA)
?preProcess
library(rattle)
fancyRpartPlot(pml_modelFit_PCA)
getTree(pml_modelFit_PCA, 1, labelVar=true)
pml_test <- read.csv('pml-testing.csv', na.strings=c("NA",""));
valid_name <- names(pml)
valid_name
pml_t <- pml_test[,names(pml_test) %in% valid_name]
names(pml_t)
pred_test <- predict(pml_modelFit_PCA, newdata=pml_t)
pml_test_PCA <- predict(preProc_PCA, pml_t[, !names(pml_train) %in% col_ignore] );
pred_test <- predict(pml_modelFit_PCA, newdata=pml_test_PCA)
print(pred_test)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred_test)
preProc_PCA <- preProcess(pml_train[, !names(pml_train) %in% col_ignore], method="pca", threshold=97.5);
pml_train_PCA <- predict(preProc_PCA, pml_train[, !names(pml_train) %in% col_ignore] );
?train
